name: Build Wheels

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - main
  push:
    branches:
      - master
      - main
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.arch }} - ${{ matrix.p_ver }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_BUILD: ${{ matrix.cibw_build }}
      CIBW_ARCHS_LINUX: ${{ matrix.arch }}
      CIBW_ARCHS_MACOS: ${{ matrix.arch }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [auto64]
        cibw_build: ["cp3{7,8,9,10,11}-*"]
        p_ver: ["3.7-3.11"]
        include:
          - arch: aarch64
            os: ubuntu-latest
            cibw_build: "cp37*"
            p_ver: "3.7"
          - arch: aarch64
            os: ubuntu-latest
            cibw_build: "cp38*"
            p_ver: "3.8"
          - arch: aarch64
            os: ubuntu-latest
            cibw_build: "cp39*"
            p_ver: "3.9"
          - arch: aarch64
            os: ubuntu-latest
            cibw_build: "cp310*"
            p_ver: "3.10"
          - arch: aarch64
            os: ubuntu-latest
            cibw_build: "cp311*"
            p_ver: "3.11"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set version environment variable
        run: echo "SQLITE_VSS_CMAKE_VERSION=$(grep -m 1 version pyproject.toml | tr -s ' ' | tr -d '\"' | tr -d "'" | cut -d' ' -f3)"  >> $GITHUB_ENV

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          CIBW_SKIP: "*musllinux*"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Optional, use if you use setuptools_scm
        submodules: true  # Optional, use if you have submodules

    - name: Install setup dependencies
      run: python -m pip install build

    - name: Build source distribution
      run: python -m build --sdist

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz

  upload_all:
    needs: [build_wheels, make_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
